/******************************************************************************/
/**********************Beginning style.css*************************************/
/*******D:\zzWork\sites\trainning-site\app\assets\styles\styles.css************/
/**
		NOTE. This is a source file for our css system. It and and the assorted
		included files all need to get post processed via PostCSS (using gulp)
		in order to accomplish this.
**/
/* This is where we import a css code fragment
	NOTE: we're using reverse slashes becasue this is based
	upon java. Does not need the extension.

	Also, imports need to be at the top of our file

	Last, npm styles (mormalize.css) don't need any path as our postcss-import
	handles that for us.
*/
/* When we added a reference to a globasl var in globals, we got an error because
	we included _globals before we included our _variables. So we move our _globals
	to after our mixins. Yes, order does make a differenc.
*/
/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
}
/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0;
}
/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}
/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}
/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent;
}
/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted; /* 2 */
}
/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}
/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}
/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sub {
  bottom: -0.25em;
}
sup {
  top: -0.5em;
}
/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none;
}
/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}
/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input { /* 1 */
  overflow: visible;
}
/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select { /* 1 */
  text-transform: none;
}
/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}
/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}
/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}
/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}
/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}
/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}
/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto;
}
/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}
/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}
/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}
/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}
/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block;
}
/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}
/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none;
}
/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none;
}
/**** Beginning file: D:\zzWork\sites\trainning-site\app\assets\styles\base\_variables.css ***/
/*
	This file contains simple variables we use throughtout.
*/
/* Color for base button, and header text */
/*** End file _variables.css ***/
/****
	File:  D:\zzWork\sites\trainning-site\\app\assets\styles\base\_mixins.css
	Description:	mixins contains 'subroutine-like' code that can be used in
			css files. This rfequjires the mixin plugin for postcss, and further,
			this mixin plugin must be set up after simple-vars and nested.
****/
/*	Create a mixin that passes style only to screens larger that what we
		consider a smartphone size. In actuality, we create mixins for 4 different
		sizes, the default, which is our super small screens < 530, the next larger
		sizes 530 small < 800, the next larger 800 < medium < 1200 and our largest
		large < 1200.
		(See modules\_large-hero.css for our first example of using this mixin.)

		By the way, a little research on phone display sizes:

		Tiny:  480 X 320	1.2% of 2017 android market
		small:
		medium: 800 X 480 10.3%
		large: 1280 X 720 28.9%

		Three groups seems to be common:  phone, tablet, and desktop
			Phone:  <375
			Tablet: 768 --> 1024
			Desktop: > 1024

			For me, I think 4 as follows:
			Tiny (default): 480 (though 320 is the smallest, this is < 1.2% of the market while
													480 gets 20%
			small: 480 --> 768
			medium:768 --> 1280
			large: >1280

			Last, detune #'s to account for browser O/H's as in this table:
			Smallest screen res for my stuff:  480 X 800. But for me, I think I'll
			just use values a bit bigger than the standard sizes so that we our desired
			formats will be in place as resolutions bounce around the target size
			480 --> 468
			768 --> 750
			1024 --> 989
			1280 --> 1245

			Schiff's break points are
			small: 530
			medium: 800
			large: 1010
*/
/* Since we're float'ing the columns, we need a way to tell the browser
	that float'ing is over. The next element does that for us. It places
	a empty text at the closeing div for our row class, clears both hor and
	vert float's and forces a display of our table. We use a mixin to define these
	clear settings so we can us this throughout.
*/
/*********** End file _mixins.css ***********/
/** Beginning file: D:\zzWork\sites\trainning-site\app\assets\styles\base\_global.css **/
/*
	This file contains styles common to our entire site.
*/
body {
	font-family: 'Roboto', sans-serif;
	color: #333;
}
img {
	max-width: 100%;
	height: auto;
}
/* Adjust the way browsers compute width percentages. The default is to
		use the assigned percentages, render the object, then apply any padding
		or margins. So many times this will brak things as the percentage plus
		padding exceeds 100%. But by using the following setting, we inform
		the browser to include padding of the object before it does any width
		calculatoin. The * {} means to apply this rule to all tags.
*/
* {
	box-sizing: border-box;
}
/* for all links make them orange */
a {
	color: #d59541;
}
/* end file _global.css **/
/**** Beginning file: D:\zzWork\sites\trainning-site\app\assets\styles\modules\_large-hero.css ***/
/*
	This will be a code fragment that provides the CSS for the large hero
	image in the masthead
*/
/*
	In this file we get a taste of nesting, another postcss filter benefit. Proper
	CSS for our objectives requires each class to get its own single definition.
	Were we to nest our css classes, then gulp produces specificity selectors
	which is not what we want. Further, in this style, we loose the relationshiop
	between classes, other than by the class name.

	However, gulp does provide a syntax to write nested code that generates separate
	css classes. The & resolves to the parent class and creates new separate class
	with the nested object.

	Also, we learn about the fontsize or rem. This is a relative size. Thge base for
	this rfelative size the size that gets used for the <html> tag. usually, this is
	16px. Soe a 1.5rem ends up about 24px.

	NOTE: We want to base as much of our style on what the user may already have going
	in terms of their default size, color, etc. This is another reason for using rem for
	size.
*/
.large-hero {
	position: relative;

	/* create a small bottom border at the bottom of the image */
	border-bottom: 10px solid #2f5572;
}
/* a white space between the image and our border element */
.large-hero__image {
		display: block;
	}
/*
		Position a block text centered horizontally and vertically within an image
	*/
.large-hero__text-content {
			position: absolute;
			left: 0;
			width: 100%;
			text-align: center;
			top: 50%;
			-webkit-transform: translateY(-50%);
			        transform: translateY(-50%);
			padding-top: 60px;	/* Compenstae for the menu bar at the top */
	}
/* any space for character descendors. This space if present, whoud show up as*/
.large-hero__title {
		font-weight: 300;
		color: #2f5572;
		margin: 0;		/* removes verticle space */
		font-size: 2.4rem;		/* base font size for mobile first design */
	}
/* Here is where we use our firtst defined mixin that causes css code
				if and when the size of the device is larger that what we expect
				smart phones to be. Remember, in our mixins, we accounted for 4
				total device sizes. However, is a later lesson, we see that we really
				only need 2 different sizes, our base and small.
		*/
@media (min-width: 500px) {
.large-hero__title {
			font-size: 4.8rem
	}
	}
/* Create a modifier for our image, making it a block level element to remove */
.large-hero__subtitle {
		font-weight: 300;
		color: #2f5572;

		/* Adjust subtitle to be responsive by using a small default font and the
			mixin
		*/
		font-size: 1.5rem;
		margin: 0;		/* removes verticle space */
	}
@media (min-width: 500px) {
.large-hero__subtitle {
			font-size: 2.9rem;
	}
	}
/* make text white, and larger */
.large-hero__description {
		color: #FFF;
		font-size: 1.1rem;
		font-weight: 100;		/* use a thin font */
		/* use a really fine and small shadow , transparent black */
		text-shadow: 2px 2px 0 rgb(0, 0, 0, .1);
		/* to get the text to wrap, set a "box" or width for the text.
			Also, we'll need to cause the paragraph block itself to remain centered
		*/
		max-width: 30rem;
		margin-right: auto;
		margin-left: auto;
	}
@media (min-width: 500px) {
.large-hero {
		font-size: 1.875rem
}
	}
/*** End file _large-hero.css ***/
/**** Beginning file: D:\zzWork\sites\trainning-site\app\assets\styles\modules\_btn.css ***/
/*
	This file will provide style for the buttons used in our site. The base or main button
	is the blue button at the top Right.
**/
.btn {
	/* set blue background and white text */
	background-color: #2f5572;
	color: #fff;

	/* remove underline, and add some margin around the text */
	text-decoration: none;
	/* Use smaller vert. padding than horizontal Schiff uses .75rem 1.2rem, but that
			is not centered to my eyes.
	*/
	padding: .75rem 1.2rem;
	display: inline-block;	/* Parent and containers become aware of padding */
}
/* Create our modifier for the orange style button sdfsfsfs */
.btn--orange {
		background-color: #d59541;
	}
/* another modifier rule for a large button */
.btn--large {
		/* with no font-size definition, the default is 1rem */
		padding: 1.1rem 1.9rem;
	}
@media (min-width: 500px) {
.btn--large {
			font-size: 1.25rem
	}
	}
/*** End file _btn.css ***/
/************************
		File:  D:\zzWork\sites\trainning-site\app\assets\styles\modules\_wrapper.css
		Description: We observe that for small devices like phones, all our text bumps
			up agains the edges. We want to fix that. But we also observe that this needed
			padding or margin is part of a larger pattern that should get shared with
			several other blocks in the system. To accomodate that pattern, we create this
			file.
************************/
.wrapper {


	/* here we deal with anything that flows outside our viewport. This is
		used to correct the problem where we have padding between columns
		and have unnexessary padding on the last right most column. See the
		_rows.css class for more explainatoin.
	*/
	overflow: hidden;

	/* If you change these padding values, be sure to change them in the
			the rule no-padding-until-medium below. We also reference this dimension
			in our testimonial rule.
	*/
	padding-left: 18px;
	padding-right: 18px;

	/* maximum view port 1200. However, we also set in our globals.css, to use
		box-sizing, so just using a max-width of 1200 would include 36px for
		padding from above. So to keep our viewport to 1200px of visible space,
		add those padding pixels below. */
	max-width: 1236px;
	margin-left: auto;	/* center content within view port */
	margin-right: auto;

}
.wrapper--medium {
		max-width: 976px;
	}
/* A css idiom: In our html, it becomes possible that we could end up
		with nexted wrapper classes. Should that even happen, we do not want
		to cascade  the L/R padding. the following syntax addresses the case
		where we end up with nested wrappers.
	*/
.wrapper .wrapper {
		padding-left: 0;
		padding-right: 0;
	}
/* Add a rule that adds a small bottom margin We account for
			small screens as well*/
.wrapper--b-margin {
		margin-bottom: 1rem;
	}
@media (min-width: 500px) {
.wrapper--b-margin {
			margin-bottom: 3.875rem
	}
	}
/* For samll screens, this wrapper class provides left and right padding.
			However, in the case of testimonials, we also have the white pannels
			for the content that also has some padding. So for small screens, this
			becomes too much padding, and this rule removes the wrapper padding
			until trhe screen size becomes medium or larger.
	*/
.wrapper--no-padding-until-medium {
		/* For small screens, 0-out any previkous padding */
		padding-left: 0;
		padding-right: 0;
	}
/* when screen size hits medium, restore padding */
@media (min-width: 800px) {
.wrapper--no-padding-until-medium {
			padding-left: 18px;
			padding-right: 18px
	}
	}
.wrapper--no-padding-until-large {
		/* For small screens, 0-out any previkous padding */
		padding-left: 0;
		padding-right: 0;
	}
/* when screen size hits medium, restore padding */
@media (min-width: 1010px) {
.wrapper--no-padding-until-large {
			padding-left: 18px;
			padding-right: 18px
	}
	}
/************* End _wrapper.css **************/
/**********************
		File:  D:\zzWork\sites\trainning-site\app\assets\styles\modules\_page-section.css
		Description: This module adress the verticle spacing that preceedes each
			Block.
***********************/
/* Class to provide top and bottom padding (0 L-R) to a block
		On smaller screens, we need less padding
*/
.page-section {
	/* base line padding for tiny screens */
	padding: 1.1rem 0;
}
@media (min-width: 800px) {
.page-section {
		padding: 4.5rem 0	/* if you change this, change no-b-padding-until-medium */
}
	}
/*
		In our Testimonials, for small screens with our columns are all single,
		we end up with spurious bottom margins in each testimonial.
	*/
.page-section--no-b-padding-until-medium {
		/* base line padding */
		padding-bottom: 0;
	}
@media (min-width: 800px) {
.page-section--no-b-padding-until-medium {
			padding-bottom: 4.5rem
	}
	}
.page-section--no-b-padding-until-large {
		/* base line padding */
		padding-bottom: 0;
	}
@media (min-width: 1010px) {
.page-section--no-b-padding-until-large {
			padding-bottom: 4.5rem
	}
	}
/* Modifier for blue background, white text (functions section) */
.page-section--blue {
		background-color: #2f5572;
		color: #fff;
	}
/* Modifier for the testimonials section to add a background image.
			However, this background does not really have a chance to shine
			on smaller screens and this image is kind of big to boot. So
			on small screens, no background.
	*/
.page-section--testimonials {
		/* for smaller sceens, use a light blue background */
		background-color: #e0e6ef;


	}
/* For large screens, use the pretty, but expensive background image */
@media (min-width: 1010px) {
.page-section--testimonials {
			background: url('/app/assets/images/testimonials-bg.jpg') top center no-repeat;
			background-size: cover


	}
	}
/********************** End _page-section.css ***********************/
/********************
	File:  D:\zzWork\sites\trainning-site\app\assets\styles\modules\_headline.css
	Description: Styles for our headlines
*********************/
.headline {
	/* remove the native bolding */
	font-weight: 300;

	/* set font-size but keep in mind small screens nee small font */
	font-size: 1.9rem;

	/* Adjust color */
	color: #2f5572;
}
@media (min-width: 500px) {
.headline {
		font-size: 2.875rem
}
	}
/* Modifier for centered headline */
.headline--centered {
		text-align: center;
	}
/* Modifier for orange headline */
.headline--orange {
		color: #d59541;
	}
/* Modifier for smaller text */
.headline--small {
		font-size: 1.16rem;
	}
@media (min-width: 500px) {
.headline--small {
			font-size: 1.875rem
	}
	}
/* make the headline fit within a 500px viewport */
.headline--narrow {
		max-width: 500px;
		margin-left: auto;
		margin-right: auto;
	}
/* make the font a lighter weight */
.headline--light {
		font-weight: 100;
	}
/* modifiers for large and small bottom margins */
.headline--b-margin-small {
		/* we use the em unit here becasue em scale with font size, so this
			class is usable on any sized font */
		margin-bottom: .5em;
	}
.headline--b-margin-large {
		margin-bottom: 1.6em;
	}
/* define how the <strong> </strong> should look */
.headline strong {
		font-weight: 400;
	}
/* Modifier for 0 top-margin */
.headline--no-t-margin {
		margin-top: 0;
	}
/*************** End _headline.css ******************/
/************************
		File:  D:\zzWork\sites\trainning-site\\app\assets\styles\modules\_row.css
		Description: This row class provides our extensible support for column
			layouts. We call this a row class becasuye we're dealing with a "row" of
			content within a table.

			We define the width of our columns by providing the placing a 12 column
			grid on the design and specifing how many 12th wide to be.
************************/
/* Since we're float'ing the columns, we need a way to tell the browser
		that float'ing is over. The next element does that for us. It places
		a empty text at the closeing div for our row class, clears both hor and
		vert float's and forces a display of our table. We use a mixin to define these
		clear settings so we can us this throughout.
	*/
.row::after {
		content: "";
		clear: both;
		display: table;
	}
/* the 4/12 wide column */
.row__4 {
		float: left;
		width: 33.33%;
	}
/* the 8/12 wide column */
.row__8 {
		float: left;
		width: 66.66%;
	}
/* set our default for tiny screens wqith this definition of our ..until-medium class */
.row__b-margin-until-medium {
		margin-bottom: 1rem;
	}
/* we find that for small screens that multiple columns is too scruntched.
		Thus, we define some modifiers to include the case that for screens of size
		medium or smaller, use full width. Of course, if we're not using the unadorned
		classes, we ought to remove them, though they only have a little cost.

		We aslso specify a rule that if we're in the one column mode, we need some
		verticle spacing. We do that by setting a base spacing and modifing it in
		the small screen mode
	*/
@media (min-width: 800px) {
.row {
		/* but when we're medium or bigger, redefine our ...until-medium class */



	/* the 4/12 wide column */

		/* the 8/12 wide column */

		/* 2 column rule */

		/* We also see that sometimes our 4/8 column widthes are just a bit off.
			So in keeping with the notion of good design, we include some rules that
			for a 4+ size and and and 8- size. Schiff chose to make modifier rules
			to the medium 4 and medium 8 rules, but I think that makes the html pretty
			complex and less understandable. Moreover, all you gain with that html
			bloat is that you save an extra float attribute in the css. I went with
			explicit sizes.
		*/

}
		.row__b-margin-until-medium {
			margin-bottom: 0;
		}
		.row__medium-4 {
			float: left;
			width: 33.33%;
		}
		.row__medium-8 {
			float: left;
			width: 66.66%;
		}
		.row__medium-6 {
			float: left;
			width: 50%;
		}
		.row__medium-4-plus {
			float: left;
			width: 37%;
		}

			.row__medium-8-minus {
			float: left;
			width: 63%;
		}
	}
@media (min-width: 1010px) {
.row {
		/* but when we're medium or bigger, redefine our ...until-medium class */



	/* the 4/12 wide column */

		/* the 8/12 wide column */

		/* 2 column rule */

		/* We also see that sometimes our 4/8 column widthes are just a bit off.
			So in keeping with the notion of good design, we include some rules that
			for a 4+ size and and and 8- size. Schiff chose to make modifier rules
			to the medium 4 and medium 8 rules, but I think that makes the html pretty
			complex and less understandable. Moreover, all you gain with that html
			bloat is that you save an extra float attribute in the css. I went with
			explicit sizes.
		*/

}
		.row__b-margin-until-large {
			margin-bottom: 0;
		}
		.row__large-4 {
			float: left;
			width: 33.33%;
		}
		.row__large-8 {
			float: left;
			width: 66.66%;
		}
		.row__large-6 {
			float: left;
			width: 50%;
		}
		.row__large-4-plus {
			float: left;
			width: 37%;
		}

			.row__large-8-minus {
			float: left;
			width: 63%;
		}
	}
/* Prodvide for gutters between colums. However, we want this style to
		apply not to the parrent row, but to each child column. The syntax
		for this is as shown.
	*/
.row--gutters > div {
		padding-right: 65px;
	}
.row--gutters-large > div {
		padding-right: 100px;
	}
.row--gutters-small > div {
		padding-right: 45px;
	}
/* With gutters, we have a problem were we really don't want any gutter
		on the last or right most column. The Schiff way to address this is
		by extending the right margin of our multi-column layout by the amount of
		gutter. We do this with a -margin-right. The negative means to move the margin
		to the right by the amount specified.

		This manouver has the effect of making our rows 65px wider than our desire, but
		all this overflow is just our padding. So we adjust how to deal with any overflow
		in our wrapper class by setting rule that overflow gets hidden.
	*/
.row--gutters {
		margin-right: -65px;
	}
.row--gutters-large {
		margin-right: -100px;
	}
.row--gutters-small {
		margin-right: -45px;
	}
/* In the testimonial section, we gave the photos a -80px relative padding to
			get the photos to sit above the block, however that causes the photo to
			run into the title from above. We solve that by creating a new modifier
			for the row with some Top Padding.
	*/
.row--t-padding {
		padding-top: 80px;
	}
/* Begin equal heigth Rules We want screens that are at least medium size to
		use a flexbox system to acheive equal heigths. we do this by giving the outer
		row div the flexbox rule, and all the columns within to also use flexbox.
		There is a syntax idiom, where the & by itseld represents the current rule.
	*/
@media (min-width: 800px) {
.row--equal-height_at-medium {
			display: flex
	}
	}
/* Now tell descendant divs also to use flexbox */
.row--equal-height_at-medium > div {
			float: none;		/* stop using float */
			display: flex;	/* and start using flexbox */
		}
@media (min-width: 1010px) {
.row--equal-height_at-large {
			display: flex
	}
	}
/* Now tell descendant divs also to use flexbox */
.row--equal-height_at-large > div {
			float: none;		/* stop using float */
			display: flex;	/* and start using flexbox */
		}
/******************* End file: _row.css *********************/
/***************
		File:  D:\zzWork\sites\trainning-site\\app\assets\styles\modules\_generic-content-containner.css
		Description:	This file contains classes for our generic containner class. This
			is how we adjust general paragraph text throughout the site.
****************/
/* select a rule that selects an paragragraph within the element specified by our
		class. */
.generic-content-containner p {
		font-weight: 300;
		line-height: 1.65;	  /* does not reuire any units uses relative to current font */
		/* is we're smaller than small (phone size of less), we'll apply the
			the default font-size of 1
		*/
		/* css shorthand for specify margins around a rectangle. Works clockwise, beginning
			from the Top:  T, R, B, L
		margin: 0, 0, 1.8rem 0;	/* specify only a Bottom margin */
	}
/* Make the font a bit larger for non-phone screens */
@media (min-width: 500px) {
.generic-content-containner p {
			font-size: 1.125rem
	}
	}
/* We also want to provide some adjustments to the links contained within these
			paragraphs. We could nest within the above paragraph, but as a mater of style
			more than 2 levels of nesting becomes challenging. So we simply invent a
			new specifier rule as shown.
	*/
.generic-content-containner p a {
		font-weight: 700; /* normal weight == 400 */

		/* we also want the link color to be orange, but that is probably better served
			in a global css.
		*/
	}
/*************** End File: _generic-content-containner.css ***************/
/***************************
	File:  D:\zzWork\sites\trainning-site\app\assets\styles\modules\_section-title.css
	Description: This file deals with the elements within the Functions section of the
								of the page
****************************/
.section-title {
	font-size: 2.55rem;
	font-weight: 300;
	text-align: center;
	/* Make icons in this block have a bit of pading */
	/* NOTE: Schiff assumes phone screens can be tinier than I think the tinest
			would be. He uses 320 px for the phone size, while my research shows that
			480 seens to be smallest in 2018. So his mixins really do not add much,
			but I've included those for the title icon.
	*/
}
/* Use a larger font for devices > small */
@media (min-width: 500px) {
.section-title {
		font-size: 3.75rem
}
	}
/* Any stgrong tag nested weithin a section-title class use this for strong */
.section-title strong {
		font-weight: 500;
	}
/* a rule to make the title blue -- used in the testimonials area */
.section-title--blue {
		color: #2f5572;
	}
/*&__icon {
		margin-right: .5rem;
		display: inline-block;
		}
*/
.section-title__icon {
    display: block;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: .6rem;
  }
@media (min-width: 500px) {
.section-title__icon {
      position: relative;
      top: 8px;
      margin-right: .5rem;
      margin-left: 0;
      margin-bottom: 0;
      display: inline-block	/* key to get any verticle spacing for the image */
  }
	}
/***************** End File: _section-title.css ********************/
/***************************
	File:	D:\zzWork\sites\trainning-site\app\assets\styles\modules\_feature-item.css
	Description: Thjis class contains all the blocks within the our Features. It includes
				the icon, title, and a paragraph.
***************************/
.feature-item {
	position: relative;		/* all children will b e relative to this class */
	padding-left: 94px;		/* shifts everything includ icon to the right */
	padding-bottom: 2.55rem;
}
/* position icon adjacent to the text */
.feature-item__icon {
		position: absolute;	/* place icon within the feature-item */
		left: 0;
	}
/* give the title  */
.feature-item__title {
		font-size: 1.875rem;
		font-weight: 300;
		margin-bottom: .8rem;	/* overrule b. margin from generic-copntent */

	}
/********************** End file: _feature-item.css ***********************/
/**********************
	File: d:\users\mdc\documents\websites\trainning-site.dev.cc\app\assets\styles\modules\_testimonial.css
	Description: These are the css rules for the individual blocks
								in teh Testimonial section.
**********************/
.testimonial {
	/* Place each testimonial in a white transparent block
			We use the rgba function which takes 3  values for Red,
			Green, and Blue, and a # 0-1 which tells the opaqueness where
			1 is no transparency and 0 is totally transparent.
	*/
	background-color: rgba(255, 255, 255, .7 );
	/* Add a bit or padding, Top, right, bottom, then left. L & R use
			over 1REM, and bottom uses 1px just becasue using 0 just makes things
			too tight, and we get some padding as part of our paragraph.

			However, in the case of small screens, we'd like to use a smaller padding
			so that text has as much room as possible.
	*/

	/* For normal tiny screens use a smaller padding 18px (same as what's in our
			wrapper class
	*/
	padding: 0 1.1125rem 1px 1.1125rem;


	/* and also for small screens when we have everyting in a single column, the
		floating images runs into the content from above. So se correct that with
		an 80px margin bottom plus a little bity extra for esthetics. And this gets
		removed when we reach our medium screen sice.
	*/
	margin-bottom: 98px;
}
/* Screens bigger than large can use our default padding of 18px */
@media (min-width: 1010px) {
.testimonial {
		padding: 0 1.8125rem 1px 1.8125rem;
		margin-bottom: 0
}
	}
.testimonial__photo {
		/* make image a circle. First apply a circle border around the image, then
				hide all of the image the falls outside the circle. Last, make the image
				size the size of our circle. Finally to get a whole circle, we need
				to set the curviture radius to half of the dimension or 80px.
		*/
		border-radius: 80px;
		overflow: hidden;
		width: 160px;
		height: 160px;

		/* Center the image in the block and use full shorthand for a margin (TRBL)*/
		margin: 0 auto -80px auto;

		/* move the image so that half of it extrends through the top of the space
				Use positrion relative toi do this. However, when we use relative, the
				rest of the content does not know where to display, so it displays assuming
				the image is where it alway was. We can get around thie by using a -margin.
				the value is 1/2 the image size or 80.
		*/
		position: relative;
		top: -80px;

		/* Last give the image a 6px border */
		border: 6px solid rgba(255, 255, 255, .7 );
	}
/* For our title */
.testimonial__title {
		/* Make it Blue and centered*/
		color: #2f5572;
		text-align: center;

		/* Adjust font size and weight */
		font-size: 1.5rem;
		font-weight: 500;

		/* Reduce verticle space between title and image */
		margin: 0;
	}
/* Sub Title rule */
.testimonial__subtitle {
		color: #d59541;
		text-align: center;
		font-weight: 400;
		font-size: 0.9375rem;
		margin: .25rem 1rem;
	}
/*
			The last column of ourt testimonial has a small problem with the
			bottom margin we have to add to keep the images from running into
			the testimonial from above. This rule addresses that problem.
	*/
.testimonial--last {
		margin-bottom: 0;
	}
/************** End File: _testimonial.css *************/
/**************************************
		File:  d:\users\mdc\documents\websites\trainning-site.dev.cc\gulp\templates\sprite.css
		Description: This is the template for svgSprite to use as he generates our
				css file that picks out individual icons from the assembled sprite file.
				In this file, we can include commands for svgSprite.

				svgSprite uses the mustash template system (the curly brackets on their sides
				sore of looks like a mustash). That is parameters enclosed within double
				curlys get acted upon.

				gulp produces a generated file: d:\users\mdc\documents\websites\trainning-site.dev.cc\app\assets\styles\modules\_sprite.css, so do not edit this directly.
				Instead, fiddle wit hthe template file and or the gulp sprite task.
***************************************/
/* Set up a start/end tag system */
/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/
.icon {
				/*
						We provide a url to for the image. We begin at the browser base folder
						then we walk the path to the svgSprite output .svg file. To specify this
						output file, we use the special mustash convention of 3 curlies and
						the sprite parameter which gives us the output path. The use of
						3 curlies is becasue the svgSprite sprite parameter contains some
						forward slashs for the path within the css folder, and we do not
						want these forward slashes to be escaped, we just want unadorned
						forward slashes.
				*/
				background-image: url('/app/assets/images/sprites/sprite-d675eadb.svg');
			}
/* clear-view-escapes -- Size & Location */
.icon--clear-view-escapes {
		/* outer includes padding */
		width: 142.4px;
		height: 59.53px;

		/* relative means percentage, absolute means px. */
		background-position: 0 0;
	}
/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/
/* comment -- Size & Location */
.icon--comment {
		/* outer includes padding */
		width: 64px;
		height: 64px;

		/* relative means percentage, absolute means px. */
		background-position: 99.70443349753694% 0;
	}
/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/
/* facebook -- Size & Location */
.icon--facebook {
		/* outer includes padding */
		width: 21.23px;
		height: 42.01px;

		/* relative means percentage, absolute means px. */
		background-position: 26.040607071652357% 45.795830448496034%;
	}
/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/
/* fire -- Size & Location */
.icon--fire {
		/* outer includes padding */
		width: 56px;
		height: 64px;

		/* relative means percentage, absolute means px. */
		background-position: 0 99.56481481481481%;
	}
/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/
/* globe -- Size & Location */
.icon--globe {
		/* outer includes padding */
		width: 64px;
		height: 64px;

		/* relative means percentage, absolute means px. */
		background-position: 27.586206896551722% 99.56481481481481%;
	}
/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/
/* instagram -- Size & Location */
.icon--instagram {
		/* outer includes padding */
		width: 42.01px;
		height: 42.01px;

		/* relative means percentage, absolute means px. */
		background-position: 63.2917018534157% 49.234556504346486%;
	}
/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/
/* mail -- Size & Location */
.icon--mail {
		/* outer includes padding */
		width: 64px;
		height: 48px;

		/* relative means percentage, absolute means px. */
		background-position: 0 48.00806451612903%;
	}
/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/
/* rain -- Size & Location */
.icon--rain {
		/* outer includes padding */
		width: 64px;
		height: 64px;

		/* relative means percentage, absolute means px. */
		background-position: 99.70443349753694% 59.25925925925926%;
	}
/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/
/* star -- Size & Location */
.icon--star {
		/* outer includes padding */
		width: 64px;
		height: 64px;

		/* relative means percentage, absolute means px. */
		background-position: 59.11330049261084% 99.56481481481481%;
	}
/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/
/* twitter -- Size & Location */
.icon--twitter {
		/* outer includes padding */
		width: 51.78px;
		height: 42.06px;

		/* relative means percentage, absolute means px. */
		background-position: 94.04330452560171% 98.50700323226104%;
	}
/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/
/* wifi -- Size & Location */
.icon--wifi {
		/* outer includes padding */
		width: 60px;
		height: 64px;

		/* relative means percentage, absolute means px. */
		background-position: 68.79227053140097% 0;
	}
/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/
/* youtube -- Size & Location */
.icon--youtube {
		/* outer includes padding */
		width: 34.75px;
		height: 42px;

		/* relative means percentage, absolute means px. */
		background-position: 36.69752421959096% 45.792307692307695%;
	}
/**************** End File:  sprite.css *********************/
/********************************************
		File:  d:\users\mdc\documents\websites\trainning-site.dev.cc\app\assets\styles\modules\_site-footer.css
		Description: classes for everything we need to style the footer of our site

*********************************************/
.site-footer {
	background-color: #2f5572;
	color:  #FFF;

	/* Overrule vertical spacing of the paragraph element contained within the div */
	padding: .5rem;

	/* Center all text contained within */
	text-align: center;
}
/* For mobile, we'll place the text and button on separate lines,  with a bit of space between */
.site-footer__text {
		display: block;
		margin-bottom: 1rem;
		font-weight: 200;
	}
@media (min-width: 800px) {
.site-footer__text {
			display: inline-block;
			margin-bottom: 0;
			margin-right: 1.4rem
	}
	}
/********************* End File:  _site-footer.css **********************************/
/*************************************
	File: d:\users\mdc\documents\websites\trainning-site.dev.cc\app\assets\styles\modules\_site-header.css
	Description: This contains the css rules fro the header. Our design goals for small screens are:
					Place the nave menu in a menu button that shows as teh 3 bar menus
					Shrink the logo
					Place the get in touch button below the icon
					Remove the blue bar background
			These changes will need to appear here and the in the primary-nav css file.

			We also also use this style for the sticky headers in lesson 48 & 49. We'll need this file
			and a new javascript module

			NOTE: The navigatoin bar is in its own file
	************************************/
.site-header {
		/*
			Our goal is to place the header "on top of" the hero image, not as html wants
			which is to place the header in its own area. We can overlay ouree header if
			we use the position absolute tag. Additionally, placing two section in the same
			area means one will have to be on top of the other, and the default is the
			second speciotied goes on top. However, we can correct this too by giving our
			heading a z-index value that is bigger than the hero image. Since the hero image
			has no z-index, nearly anything we give the header wins for top position.
			Last, the default sizing for the element would be to minimize everything in our
			site-header. Again, we can override this by giving the rule width
		*/
		position: absolute;
		z-index: 2;
		width: 100%;

		/* add just a bit of verticle spacing to bring the header below the top of the window */
		padding: 10px 0;

		/* For some bling. When the background color changes, we want that transition to
				occur in 300ms, and should take for the form of "ease-out:
		*/
		transition: background-color .3s ease-out;

}
/* Let's build the modifier class that some js scrip will programatically add. When the
				class is present, we want the background to have a semitransparent color.
		*/
.site-header--is-expanded {
			background-color: rgba(47,85,114, .55);
		}
/*
			Set the background color and make it transparent by using the rgba function
			like rgba(47, 85, 114, .3). We'd need to manually translate our hex colors into
			decimal, as that is the only correct parametes for rgba.

			However, there is a postcss plugin we can use that extends our abilities and
			let's us do things like what we use below. The new plugin is postcss-hexrgba.
		*/
@media (min-width: 800px) {
.site-header {
			background-color: rgba(47,85,114, .30);

			/* For medium and larger screens we want the nave bar to be sticky */
			position: fixed	/* locks the element even as we scroll */

			/* Create the new rule that will let us make the sticky element have the
				dark background.
			*/

}
			.site-header--dark {
				/* Make the background darker */
				background-color: rgba(23, 51, 72, .85);
			}
	}
/* Cause button to move to the right edge for medium and larger screens, but to just
				follow the flow for small screens. */
@media (min-width: 800px) {
.site-header__btn-container {
				float: right

		}
	}
/* Take logo out of the normal page flow by psoitioning absolutely */
.site-header__logo {
			z-index: 1;
			position: absolute;
			background-color: #2f5572;
			padding: 25px 36px;
			top: 0;		/* place logo at top of browser window */

			/* For small screens we want the logo centered and shrunk*/
			left: 50%;
			-webkit-transform: translateX(-50%) scale(.8);
			        transform: translateX(-50%) scale(.8);
			-webkit-transform-origin: 50% 0;
			        transform-origin: 50% 0;

			/* And whenever the logo is changing style we'll animate it */
			transition: -webkit-transform .3s ease-out;
			transition: transform .3s ease-out;
			transition: transform .3s ease-out, -webkit-transform .3s ease-out;
		}
@media (min-width: 800px) {
.site-header__logo {
				left: auto;
				-webkit-transform: translateX(0) ;
				        transform: translateX(0) 

				/* As part of our Stickyheader lessons, we want to also shrink the logo whenever
					we're in dark mode. So we use a rule design that says when class A and Class B
					are present then apply the rule. Remember, the '&' is the class name of the parent,
					or in this case, .site-header__logo
				*/
		}
				.site-header--dark .site-header__logo {
					/* make smaller */
					-webkit-transform: scale(.57);
					        transform: scale(.57);
				}
	}
/* address the text of our logo making it invisible */
.site-header__logo__graphic {
			text-indent: -9999px;	/* Moves the text out to never never land */
		}
/* this class controls the display of our navigatoin list ul/li that
				composes the working part of the nav basr. Moreover, becasue the [Get in touch]
				button is also part of our navigaton system, our html includes that object in the div
				for this class.
		*/
.site-header__menu-content {
			/* force list elements not to show on small screens by setting
				opacity to 0. However, this does not remove the items from the browser, just
				makes them invisible, and they could get blindly clicked. To avoid this accidental
				click, we adjust z-index, and we have to make position things relative. then
				to make the list items visible, we need to set the opacity to 1 and adjust z-index.
			*/
			opacity: 0;
/*			transform: scale(1.2); 	Recommended by Schiff, but ends up causing the
																	button to get truncated on the right on large screens.
																	This means we can also removed the transform: scale(1)
																	commands from the mixin below and the --is-visible
																	rule further down. */
			transition: all .3s ease-out;		/* when opacity does change animate the change */
			position: relative;
			z-index: -10;

			/* The following two attributes won't be showing on small screens.
					However, we place thse attributes here so that when it does show,
					these parameters won't be changing, and the section will just zoom
					into and out of existance.
			*/
			/* When the menu does show in the browser, render it below the icon */
			padding-top: 90px;

			/* when the menu shows, center the text */
			text-align: center;
		}
@media (min-width: 800px) {
.site-header__menu-content {
				opacity: 1;	/* show this for medium and larger screens */
				z-index: 1;
				padding-top: 0
/*				transform: scale(1);
*/
		}
	}
/* Build a modifier class that will toggle the menu on and off. This class
					gets installed programatically via some javascript.  */
.site-header__menu-content--is-visible {
				opacity: 1;
				z-index: 1;
/*				transform: scale(1);
*/

			}
/* Create the mobile menu icon. It starts as a small white block, but we massage it into
				the standard hamburger 3-line menu icon. And then we animate it when we click on it
				so that it morphs into an X to remove the displayed mobile navigtoin bar.

				We also want these three lines to animate when they go from hamburger to X. So set some
				transform properties toi get this to happen.
		*/
.site-header__menu-icon {
			/* Begin with a simple white square and don't show it for large screens*/
			width: 20px;
			height: 19px;		/* Schiff suggests 19px just to make the hamburer icon symetrical */
/*			background-color: #FFF;
*/
			position: absolute;
			top: 10px;
			right: 10px;
			/* Make sure, as we're playing with other z-indices, that this guy
					remains on top, so thjat it is clickable.
			*/
			z-index: 10;
		}
/* the following modifiers create the 3-line hamburger menu element */
.site-header__menu-icon::before{
				content: "";		/* forces this object to be visible */
				position: absolute;
				top: 0;
				left: 0;
				width: 20px;	/* Same width as parent */
				height: 3px;
				background-color: #fff;
				/* This element is going to get rotated, and when it does, we want it to ratate
						about its upper left hand corner. the default is the center (50% 50%)
				*/
				-webkit-transform-origin:0 0;
				        transform-origin:0 0;
				transition: -webkit-transform .3s ease-out;
				transition: transform .3s ease-out;
				transition: transform .3s ease-out, -webkit-transform .3s ease-out;
			}
.site-header__menu-icon__middle{
				position: absolute;
				top: 8px;
				left: 0;
				width: 20px;	/* Same width as parent */
				height: 3px;
				background-color: #fff;
				transition: all .3s ease-out;
				-webkit-transform-origin: 0 50%;
				        transform-origin: 0 50%;		/* this is so when we animate, everything pulls to the left */
			}
.site-header__menu-icon::after{
				content: "";
				position: absolute;
				bottom: 0;
				left: 0;
				width: 20px;	/* Same width as parent */
				height: 3px;
				background-color: #fff;
				-webkit-transform-origin: 0 100%;
				        transform-origin: 0 100%;	/* We want to rotate around the botton left hand corner */
				transition: transition .3s ease-out;
			}
@media (min-width: 800px) {
.site-header__menu-icon {
				display: none
		}
	}
/* the following rule manages the icon's transition to and from an "X".
						We rotate the top line by 45 degress, but we need to tweak the
						point of rotation. Then we'll need to increase it length so we'll
						scale the x-cordinate by 25%. Also, we see that bottom line that rotate
						CCW looks to be just a bit off, so we do a translate on that.
				*/
.site-header__menu-icon--close-x::before {
				-webkit-transform: rotate(44deg) scaleX(1.35);
				        transform: rotate(44deg) scaleX(1.35);	/* Schiff uses scale(1.25) */
			}
/* create a rule to hide the middle bar, but we have to manually create the
					the name.
			*/
.site-header__menu-icon--close-x .site-header__menu-icon__middle {
				opacity: 0;
				-webkit-transform: scaleX(0);
				        transform: scaleX(0);	/* cause the middle bar to shrink */
			}
.site-header__menu-icon--close-x::after {
				-webkit-transform: rotate(-44deg) scaleX(1.35) translateY(1px);
				        transform: rotate(-44deg) scaleX(1.35) translateY(1px);	/* Schiff uses scale(1.25) */
			}
/************************ End File: _site-header.css  *********************/
/*********************************
	File:  d:\users\mdc\documents\websites\trainning-site.dev.cc\app\assets\styles\modules\_primary-nav.css
	Description: This is the class for our navigation bar, which is the pattern of a
				horizontal list of links. And since we think is all a pattern of its own,
				we deviatge from BEM naming and place all the formatting here.

				Our design goals for small screens are:
					Place the nave menu in a menu button that shows as teh 3 bar menus
					Shrink the logo
					Place the get in touch button below the icon
					Remove the blue bar background
			These changes will need to appear here and the in the site-header css file.
/*********************************/
.primary-nav {

	/* For the small screens, place a bit of padding between the GetInTouch button and
			the navigation list. Undo that for medium screems
	*/
	padding-top: 10px;

	/*
		We believe this pattern of a horizontal list of link to be generic, so we do not
		build classes for each element of the menu (ul, li, a, href, etc.) Instead evcerything
		is right here. So the usage will be to include a simple list within a primary-nav div.

		Following, we set up the list
	*/

}
@media (min-width: 800px) {
.primary-nav {
		padding-top: 0

}
	}
/* float right only for medium and larger screens */
@media (min-width: 800px) {
.primary-nav--pull-right {
			float: right
	}
	}
/* All ul's within our class will have no maring, padding. */
.primary-nav ul {
		margin: 0;
		padding: 0;
	}
/* This says after the ul, stop floating */
.primary-nav ul::after {
		content: "";
		clear: both;
		display: table;
	}
/* Similarly, all list items should be unadorned. Further they too should float
		right. And since we're floating we need to tell the parent to stop floating
		when he's done. But for small screens, we want the just want the li items to
		be on a single line
	*/
.primary-nav li {
		list-style: none;
		display: inline-block;
		padding-right: 7px;




		/* Adjust padding to get links to verticaly center in area */
		/* NOTE: Schiff places this tag in the a element below, but that does not seem to work for me.
				Also, Schiff used padding-top of 12, thjat is too much for me. */
		padding-top: 5px;
	}
@media (min-width: 800px) {
.primary-nav li {
			padding-right: 20px;
			float: left;
			display: block;
	}
	}
/* for the last item in our list, we don't need any right padding at leat on small screens,
			but we do need it for larger screens else we run into the button.
	*/
.primary-nav li:last-child {
		padding-right: 0;
	}
@media (min-width: 800px) {
.primary-nav li:last-child {
			padding-right: 20px
	}
	}
/* Any links within this primary-nav class should not be main$Orange nor should be
			underlined. We also want some padding and background colors but only for the small
			screens.
	*/
.primary-nav a {
		color: #fff;
		text-decoration: none;
		font-weight: 300;
		display: block;
		padding: 5px 8px;
		font-size: .8rem;
		background-color: rgba(47,85,114, .5);

	}
@media (min-width: 800px) {
.primary-nav a {
/*			padding: 12px 0;	Schiff recommended, but not needed -- things still line up. */
			font-size: 1rem;
			background-color: transparent

			/* This rule applies in the case where: we're
						medium or larger
						we're in an a tag
						we have the class is-current-link
					NOTE!! no spaces on the rule
			*/

	}
			.primary-nav a.is-current-link {
				color: #fabb69;
			}
	}
/************************* End File: _primary-nav.css  **************************************/
/********************************************
	File:  d:\users\mdc\documents\websites\trainning-site.dev.cc\app\assets\styles\modules\_reveal-item.css

	Description: This contains the stull for Lesson 47, reveal on scroll. It will focus on the
			the Features section of our page.

********************************************/
.reveal-item {
	/* Make Featured Items invisible */
	opacity: 0;

	/* make the transition to visdible an animated operation */
	transition: all 1.5s ease-out;

	/* More bling, get the object to give a zoom effect when they become visible */
	-webkit-transform: scale(1.15);
	        transform: scale(1.15);
}
/* Create rujle that will allow FI to become visible */
.reveal-item--is-visible {
		opacity: 1;
		-webkit-transform: scale(1);
		        transform: scale(1);

	}
/****************** End File: _reveal-item.css ********************/
/**********************Ending style.css****************************************/
