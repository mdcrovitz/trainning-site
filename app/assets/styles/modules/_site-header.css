/*************************************
	File: d:\users\mdc\documents\websites\trainning-site.dev.cc\app\assets\styles\modules\_site-header.css
	Description: This contains the css rules fro the header. Our design goals for small screens are:
					Place the nave menu in a menu button that shows as teh 3 bar menus
					Shrink the logo
					Place the get in touch button below the icon
					Remove the blue bar background
			These changes will need to appear here and teh in the primary-nav css file.

			NOTE: The navigatoin bar is in its own file
	************************************/
	.site-header {
		/*
			Our goal is to place the header "on top of" the hero image, not as html wants
			which is to place the header in its own area. We can overlay ouree header if
			we use the position absolute tag. Additionally, placing two section in the same
			area means one will have to be on top of the other, and the default is the
			second speciotied goes on top. However, we can correct this too by giving our
			heading a z-index value that is bigger than the hero image. Since the hero image
			has no z-index, nearly anything we give the header wins for top position.
			Last, the default sizing for the element would be to minimize everything in our
			site-header. Again, we can override this by giving the rule width
		*/
		position: absolute;
		z-index: 2;
		width: 100%;

		/* add just a bit of verticle spacing to bring the header below the top of the window */
		padding: 10px 0;

		/* For some bling. When the background color changes, we want that transition to
				occur in 300ms, and should take for the form of "ease-out:
		*/
		transition: background-color .3s ease-out;

		/* Let's build the modifier class that some js scrip will programatically add. When the
				class is present, we want the background to have a semitransparent color.
		*/
		&--is-expanded {
			background-color: rgba($mainBlue, .55);
		}


		/*
			Set the background color and make it transparent by using the rgba function
			like rgba(47, 85, 114, .3). We'd need to manually translate our hex colors into
			decimal, as that is the only correct parametes for rgba.

			However, there is a postcss plugin we can use that extends our abilities and
			let's us do things like what we use below. The new plugin is postcss-hexrgba.
		*/
		@mixin atMedium{
			background-color: rgba($mainBlue, .30);
		}


		/* Cause button to move to the right edge for medium and larger screens, but to just
				follow the flow for small screens. */
		&__btn-container {
			@mixin atMedium {
				float: right;
			}

		}

		/* Take logo out of the normal page flow by psoitioning absolutely */
		&__logo {
			z-index: 1;
			position: absolute;
			background-color: $mainBlue;
			padding: 25px 36px;
			top: 0;		/* place logo at top of browser window */

			/* For small screens we want the logo centered and shrunk*/
			left: 50%;
			transform: translateX(-50%) scale(.8);
			transform-origin: 50% 0;

			@mixin atMedium {
				left: auto;
				transform: translateX(0) ;
			}
		}

		/* address the text of our logo making it invisible */
		&__logo__graphic {
			text-indent: -9999px;	/* Moves the text out to never never land */
		}


		/* this class controls the display of our navigatoin list ul/li that
				composes the working part of the nav basr. Moreover, becasue the [Get in touch]
				button is also part of our navigaton system, our html includes that object in the div
				for this class.
		*/
		&__menu-content {
			/* force list elements not to show on small screens by setting
				opacity to 0. However, this does not remove the items from the browser, just
				makes them invisible, and they could get blindly clicked. To avoid this accidental
				click, we adjust z-index, and we have to make position things relative. then
				to make the list items visible, we need to set the opacity to 1 and adjust z-index.
			*/
			opacity: 0;
/*			transform: scale(1.2); 	Recommended by Schiff, but ends up causing the
																	button to get truncated on the right on large screens.
																	This means we can also removed the transform: scale(1)
																	commands from the mixin below and the --is-visible
																	rule further down. */
			transition: all .3s ease-out;		/* when opacity does change animate the change */
			position: relative;
			z-index: -10;

			/* The following two attributes won't be showing on small screens.
					However, we place thse attributes here so that when it does show,
					these parameters won't be changing, and the section will just zoom
					into and out of existance.
			*/
			/* When the menu does show in the browser, render it below the icon */
			padding-top: 90px;

			/* when the menu shows, center the text */
			text-align: center;


			@mixin atMedium {
				opacity: 1;	/* show this for medium and larger screens */
				z-index: 1;
				padding-top: 0;
/*				transform: scale(1);
*/			}

			/* Build a modifier class that will toggle the menu on and off. This class
					gets installed programatically via some javascript.  */
			&--is-visible {
				opacity: 1;
				z-index: 1;
/*				transform: scale(1);
*/

			}
		}

		/* Create the mobile menu icon. It starts as a small white block, but we massage it into
				the standard hamburger 3-line menu icon. And then we animate it when we click on it
				so that it morphs into an X to remove the displayed mobile navigtoin bar.

				We also want these three lines to animate when they go from hamburger to X. So set some
				transform properties toi get this to happen.
		*/
		&__menu-icon {
			/* Begin with a simple white square and don't show it for large screens*/
			width: 20px;
			height: 19px;		/* Schiff suggests 19px just to make the hamburer icon symetrical */
/*			background-color: #FFF;
*/
			position: absolute;
			top: 10px;
			right: 10px;
			/* Make sure, as we're playing with other z-indices, that this guy
					remains on top, so thjat it is clickable.
			*/
			z-index: 10;

			/* the following modifiers create the 3-line hamburger menu element */
			&::before{
				content: "";		/* forces this object to be visible */
				position: absolute;
				top: 0;
				left: 0;
				width: 20px;	/* Same width as parent */
				height: 3px;
				background-color: #fff;
				/* This element is going to get rotated, and when it does, we want it to ratate
						about its upper left hand corner. the default is the center (50% 50%)
				*/
				transform-origin:0 0;
				transition: transform .3s ease-out;
			}

			&__middle{
				position: absolute;
				top: 8px;
				left: 0;
				width: 20px;	/* Same width as parent */
				height: 3px;
				background-color: #fff;
				transition: all .3s ease-out;
				transform-origin: 0 50%;		/* this is so when we animate, everything pulls to the left */
			}

			&::after{
				content: "";
				position: absolute;
				bottom: 0;
				left: 0;
				width: 20px;	/* Same width as parent */
				height: 3px;
				background-color: #fff;
				transform-origin: 0 100%;	/* We want to rotate around the botton left hand corner */
				transition: transition .3s ease-out;
			}



			@mixin atMedium{
				display: none;
			}
		}

				/* the following rule manages the icon's transition to and from an "X".
						We rotate the top line by 45 degress, but we need to tweak the
						point of rotation. Then we'll need to increase it length so we'll
						scale the x-cordinate by 25%. Also, we see that bottom line that rotate
						CCW looks to be just a bit off, so we do a translate on that.
				*/
		&__menu-icon--close-x{
			&::before {
				transform: rotate(44deg) scaleX(1.35);	/* Schiff uses scale(1.25) */
			}

			/* create a rule to hide the middle bar, but we have to manually create the
					the name.
			*/
			.site-header__menu-icon__middle {
				opacity: 0;
				transform: scaleX(0);	/* cause the middle bar to shrink */
			}

			&::after {
				transform: rotate(-44deg) scaleX(1.35) translateY(1px);	/* Schiff uses scale(1.25) */
			}


		}

}




	/************************ End File: _site-header.css  *********************/