/**************************************
		File:  d:\users\mdc\documents\websites\trainning-site.dev.cc\gulp\templates\sprite.css
		Description: This is the template for svgSprite to use as he generates our
				css file that picks out individual icons from the assembled sprite file.
				In this file, we can include commands for svgSprite.

				svgSprite uses the mustash template system (the curly brackets on their sides
				sore of looks like a mustash). That is parameters enclosed within double
				curlys get acted upon.

				gulp produces a generated file: d:\users\mdc\documents\websites\trainning-site.dev.cc\app\assets\styles\modules\_sprite.css, so do not edit this directly.
				Instead, fiddle wit hthe template file and or the gulp sprite task.
***************************************/

/* Set up a start/end tag system */
	/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/
			.icon {
				/*
						We provide a url to for the image. We begin at the browser base folder
						then we walk the path to the svgSprite output .svg file. To specify this
						output file, we use the special mustash convention of 3 curlies and
						the sprite parameter which gives us the output path. The use of
						3 curlies is becasue the svgSprite sprite parameter contains some
						forward slashs for the path within the css folder, and we do not
						want these forward slashes to be escaped, we just want unadorned
						forward slashes.
				*/
				background-image: url('../../assets/images/sprites/sprite-cbdfe7ac.svg');
			}


	/* clear-view-escapes -- Size & Location */
	.icon--clear-view-escapes {
		/* outer includes padding */
		width: 144.4px;
		height: 61.53px;

		/* relative means percentage, absolute means px. */
		background-position: 0 0;
	}
	/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/


	/* comment -- Size & Location */
	.icon--comment {
		/* outer includes padding */
		width: 66px;
		height: 66px;

		/* relative means percentage, absolute means px. */
		background-position: 99.71014492753623% 0;
	}
	/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/


	/* facebook -- Size & Location */
	.icon--facebook {
		/* outer includes padding */
		width: 23.23px;
		height: 44.01px;

		/* relative means percentage, absolute means px. */
		background-position: 26.424310365536293% 45.92133741323979%;
	}
	/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/


	/* fire -- Size & Location */
	.icon--fire {
		/* outer includes padding */
		width: 58px;
		height: 66px;

		/* relative means percentage, absolute means px. */
		background-position: 0 99.58035714285714%;
	}
	/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/


	/* globe -- Size & Location */
	.icon--globe {
		/* outer includes padding */
		width: 66px;
		height: 66px;

		/* relative means percentage, absolute means px. */
		background-position: 28.019323671497585% 99.58035714285714%;
	}
	/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/


	/* instagram -- Size & Location */
	.icon--instagram {
		/* outer includes padding */
		width: 44.01px;
		height: 44.01px;

		/* relative means percentage, absolute means px. */
		background-position: 63.059522249879905% 49.25740726919919%;
	}
	/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/


	/* mail -- Size & Location */
	.icon--mail {
		/* outer includes padding */
		width: 66px;
		height: 50px;

		/* relative means percentage, absolute means px. */
		background-position: 0 48.0703125%;
	}
	/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/


	/* rain -- Size & Location */
	.icon--rain {
		/* outer includes padding */
		width: 66px;
		height: 66px;

		/* relative means percentage, absolute means px. */
		background-position: 99.71014492753623% 58.92857142857143%;
	}
	/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/


	/* star -- Size & Location */
	.icon--star {
		/* outer includes padding */
		width: 66px;
		height: 66px;

		/* relative means percentage, absolute means px. */
		background-position: 59.90338164251208% 99.58035714285714%;
	}
	/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/


	/* twitter -- Size & Location */
	.icon--twitter {
		/* outer includes padding */
		width: 53.78px;
		height: 44.06px;

		/* relative means percentage, absolute means px. */
		background-position: 94.15199343125627% 98.55159026429745%;
	}
	/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/


	/* wifi -- Size & Location */
	.icon--wifi {
		/* outer includes padding */
		width: 62px;
		height: 66px;

		/* relative means percentage, absolute means px. */
		background-position: 68.43601895734596% 0;
	}
	/*
		The exact same url line gets added for each new icon, and this is
		wasteful. We want to have only a single instance of the url line. However,
		we can only reference the sprite parameter from within the #shapes block.
		So we create a new class for the single url, and wrap that in the
		singleton class in the #first /first block
	*/


	/* youtube -- Size & Location */
	.icon--youtube {
		/* outer includes padding */
		width: 36.75px;
		height: 44px;

		/* relative means percentage, absolute means px. */
		background-position: 37.76931216931217% 45.917910447761194%;
	}


/**************** End File:  sprite.css *********************/